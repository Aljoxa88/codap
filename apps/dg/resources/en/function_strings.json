/*
 * JSON file which contains information about CODAP functions in the form of localizable strings.
 * Comments are allowed because they are stripped out before the file is parsed internally.
 */
{
  /*
   * Arithmetic Functions
   */
  "abs": {
    "displayName": "abs",
    "description": "Computes the absolute value of its argument. This is equivalent to using the absolute value bars.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number of which you want the absolute value."
      }
    ],
    "examples": [
      "abs(3 – 5) is 2",
      "abs(3-7) = |3 – 7|=4"
    ]
  },
  "ceil": {
    "displayName": "ceil",
    "description": "Returns the closest integer greater than or equal to its argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The value you want to round up."
      }
    ],
    "examples": [
      "ceil(1) returns 1",
      "ceil(1.5) returns 2",
      "ceil(-1.5) returns -1"
    ]
  },
  "exp": {
    "displayName": "exp",
    "description": "Returns the result of computing the constant e to the power of its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The exponent applied to the base e."
      }
    ],
    "examples": [
      "exp(2) is 7.39, the same as e squared"
    ]
  },
  "floor": {
    "displayName": "floor",
    "description": "Returns the largest integer less than or equal to its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The value you want to round."
      }
    ],
    "examples": [
      "floor(1) returns 1",
      "floor(1.5) returns 1",
      "floor(-1.5) returns -2"
    ]
  },
  "frac": {
    "displayName": "frac",
    "description": "Returns the fractional or noninteger part of a number.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the fractional part."
      }
    ],
    "examples": [
      "frac(1.5) returns 0.5",
      "frac(-2.3) returns -0.3"
    ]
  },
  "ln": {
    "displayName": "ln",
    "description": "Returns the logarithm of a number to base e.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the natural logarithm."
      }
    ],
    "examples": [
      "ln(100) is 4.61"
    ]
  },
  "log": {
    "displayName": "log",
    "description": "Returns the logarithm of a number to base 10.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the logarithm."
      }
    ],
    "examples": [
      "log(100) is 2"
    ]
  },
  "pow": {
    "displayName": "pow",
    "description": "Returns the result of a number raised to a power.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The base number."
      },
      {
        "name": "power",
        "type": "number",
        "description": "The power of the exponent."
      }
    ],
    "examples": [
      "pow(2,5) is 2 to the 5, returns 32"
    ]
  },
  "round": {
    "displayName": "round",
    "description": "Returns the value of its argument rounded to the specified number of decimal places (default 0). This function has an optional, second argument that specifies how many decimals to round to.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want to round to the nearest integer."
      },
      {
        "name": "digits",
        "type": "number",
        "description": "The number of digits to which you want to round the numeric argument. The argument can be negative to round off digits left to the decimal point."
      }
    ],
    "examples": [
      "round(3.14) is 3",
      "round(π, 4) is 3.1416",
      "round(1234, –2) is 1200"
    ]
  },
  "sqrt": {
    "displayName": "sqrt",
    "description": "Returns the square root of its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the square root."
      }
    ],
    "examples": [
      "sqrt(100) returns 10"
    ]
  },
  "trunc": {
    "displayName": "round",
    "description": "Returns the nearest integer equal to or smaller in magnitude (closer to zero) than its argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to truncate."
      }
    ],
    "examples": [
      " trunc(5.5) returns 5"
    ]
  },
  /*
   * Date/Time Functions
   */
  "date": {
    "displayName": "date",
    "description": "Returns a new date created from its arguments. If any argument is omitted it is defaulted to 0 (or 1 for the day). If a single large argument is specified, it is assumed to be seconds since January 1, 1970 and is converted accordingly.",
    "args": [
      {
        "name": "year",
        "type": "number",
        "description": "Represents the year of the date. This can be a 1-digit, 2-digit, 3-digit, or 4-digit number."
      },
      {
        "name": "month",
        "type": "number",
        "description": "Represents the month of the year, from 1 to 12."
      },
      {
        "name": "day",
        "type": "number",
        "description": "Represents the day of the month, from 1 to 31."
      },
      {
        "name": "hour",
        "type": "number",
        "description": "Represents the hour of the day, from 1 to 23."
      },
      {
        "name": "minute",
        "type": "number",
        "description": "Represents the minutes of the hour, from 1 to 59."
      },
      {
        "name": "seconds",
        "type": "number",
        "description": "Represents the seconds of the minute, from 1 to 59."
      }
    ],
    "examples": [
      "date(1969, 7, 16) returns 7/16/1969",
      "date(1395154345) returns 3/18/2014 7:52:25 AM",
      "date(2016, 12, 19, 13, 59, 15, 26) returns 12/19/2016 1:59:15 PM",
      "date(16) returns 1/1/2016"
    ]
  },
  "dayOfMonth": {
    "displayName": "dayOfMonth",
    "description": "Returns the day of the month corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "dayOfMonth(\"9/1/2016\") returns 1",
      "dayOfMonth(\"6-14-2008\") returns 14"
    ]
  },
  "dayOfWeek": {
    "displayName": "dayOfWeek",
    "description": "Returns the numeric day of the week corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, dayOfWeek(\"8-31-2005\") returns 4 because August 31, 2005 is a Wednesday"
    ]
  },
  "dayOfWeekName": {
    "displayName": "dayOfWeekName",
    "description": "Returns the word name of the day of the week corresponding to the given date. ",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, dayOfWeek(\"8-31-2005\") returns Wednesday"
    ]
  },
  "hours": {
    "displayName": "hours",
    "description": "Returns the hour of the day corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date and time. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is 8:57 PM on Aug 31, 2005, hours(\"8-31-2005 8:57 PM\") returns 20"
    ]
  },
  "minutes": {
    "displayName": "minutes",
    "description": "Returns the minute of the hour corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date and time. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If date_time is 8:57 PM on Aug 31, 2005, minutes(\"8-31-2005 8:57 PM\") returns 57"
    ]
  },
  "month": {
    "displayName": "month",
    "description": "Returns the number of the month corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, month(\"8-31-2005\") returns 8"
    ]
  },
  "monthName": {
    "displayName": "month",
    "description": "Returns the name of the month corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, monthName(\"8-31-2005\") returns August"
    ]
  },
  "now": {
    "displayName": "now",
    "description": "Returns the current date and time.",
    "args": [
      {
        "description": "There are no parameters for this function."
      }
    ],
    "examples": [
      "If the current date and time is 3:30:51 PM on Aug 31, 2005, now() returns 8/31/2005 3:30:51 PM"
    ]
  },
  "seconds": {
    "displayName": "seconds",
    "description": "Returns the seconds of the minute corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date and time. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is 3:30:51 PM on Aug 31, 2005, seconds(\"8-31-2005 3:30:51 PM\") returns 51"
    ]
  },
  "today": {
    "displayName": "today",
    "description": "Returns current date with no time.",
    "args": [
      {
        "description": "There are no parameters for this function."
      }
    ],
    "examples": [
      "If today's date is December 20, 2016, today() returns 12/20/2016"
    ]
  },
  "year": {
    "displayName": "year",
    "description": "Returns the year corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date and time. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is 3:30 PM on Aug 31, 2005, year(\"8-31-2005 3:30 PM\") returns 2005",
      "year(\"8/25/1492\") returns 1492"
    ]
  },
  /*
   * Lookup Functions
   */
  "first": {
    "displayName": "first",
    "description": "Returns the value of its argument evaluated for the first case.",
    "args": [
      {
        "name": "attribute",
        "type": "attribute",
        "description": "The specified attribute."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the first case."
      }
    ],
    "examples": [
      "first(population) returns the first value of the attribute population",
      "first(population,sex=\"female\") returns the first value for the attribute population for which the attribute sex is female"
    ]
  },
  "last": {
    "displayName": "last",
    "description": "Returns the value of its argument evaluated for the last case.",
    "args": [
      {
        "name": "attribute",
        "type": "attribute",
        "description": "The specified attribute."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the last case."
      }
    ],
    "examples": [
      "last(amountInBank) returns the last value of the attribute amountInBank",
      "last(amountInBank, year>2010) returns the last value for the attribute amountInBank for which the year is greater than 2010"
    ]
  },
  "lookupByIndex": {
    "displayName": "lookupByIndex",
    "description": "Returns the value of the specified attribute for the case at the specified (1-based) index in the data set name. Note that dataSetName and attributeName must be strings (or expressions that evaluate to strings), while index should evaluate to an integer.",
    "args": [
      {
        "name": "\"remoteDataSetName\"",
        "type": "string",
        "description": "The collection where you want to look up the value."
      },
      {
        "name": "\"remoteAttributeName\"",
        "type": "attribute",
        "description": "The name of the attribute in the collection containing the return value."
      },
      {
        "name": "index",
        "type": "number",
        "description": "The index of a case in that collection."
      }
    ],
    "examples": [
      "lookupByIndex(\"United_States\", \"Full_state_name\", index) looks up the attribute Full_state_name in the United_States data set at the index point. It then returns Full_state_name in your data set",
      "In a document that has a collection States, lookupValueByIndex(\"States\", \"Name\", 3) would give \"Arizona\" as the result"
    ]
  },
  "lookupByKey": {
    "displayName": "lookupByKey",
    "description": "Returns the value of the specified returned attribute for the case with the specified keyValue as its value for the keyAttributeName attribute in the specified data set.",
    "args": [
      {
        "name": "\"remoteDataSetName\"",
        "type": "string",
        "description": "The collection where you want to look up the value."
      },
      {
        "name": "\"remoteAttributeName\"",
        "type": "string",
        "description": "The name of an attribute whose value is to be looked up in that collection."
      },
      {
        "name": "\"keyAttributeName\"",
        "type": "string",
        "description": "The name of an attribute to be used as a \"key\" into the collection."
      },
      {
        "name": "keyValue",
        "type": "value",
        "description": "The value to be matched with the key."
      }
    ],
    "examples": [
      "lookupByKey(\"States\", \"Population\", \"State\", \"CA\") would return 39000000, the result of looking up the population for California in a collection of states",
      "lookupByKey(\"United_States\", \"State_abbreviations1\", \"State_abbreviations2\", Full_state_name) looks up the states in the data set \"United_States.\" The attribute \"State_abbreviations1\" from the first data set matches the attribute \"State_abbreviations2\" from the second data set. The function looks up the states \"CA,\" \"WA,\" \"OR\" and returns \"California,\" \"Washington,\" \"Oregon\""
    ]
  },
  "next": {
    "displayName": "next",
    "description": "Returns the value of that expression for the next case.",
    "args": [
      {
        "name": "attribute",
        "type": "attribute",
        "description": "The specified attribute."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the next case."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the next case."
      }
    ],
    "examples": [
      "next(number) is 10",
      "next(number, City=\"Tucson\") returns the next value for the attribute number for which the attribute City is Tucson"
    ]
  },
  "prev": {
    "displayName": "prev",
    "description": "Returns the value of that expression for the previous case.",
    "args": [
      {
        "name": "attribute",
        "type": "attribute",
        "description": "The specified attribute."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the previous case."
      },
      {
        "name": "filter",
        "type": "filter",
        "description": "Additional filter, numbers, or ranges for which you want the previous case."
      }
    ],
    "examples": [
      "prev(height) returns 9",
      "prev(height, sex=\"female\") returns the previous value for the attribute height for which the attribute sex is female"
    ]
  },
  /*
   * Other Functions
   */
  "boolean": {
    "displayName": "boolean",
    "description": "Returns the condition true if the conditions in a test are true and false otherwise.",
    "args": [
      {
        "name": "argument",
        "type": "boolean",
        "description": "The specified argument."
      }
    ],
    "examples": [
      "boolean(age > 60) is true or false",
      "age > 60 is true or false"
    ]
  },
  "greatCircleDistance": {
    "displayName": "greatCircleDistance",
    "description": "Returns the shortest distance between two latitude and longitude points on the surface of the earth.",
    "args": [
      {
        "name": "latitude1",
        "type": "latitude",
        "description": "The latitude of the first point."
      },
      {
        "name": "longitude1",
        "type": "longitude",
        "description": "The longitude of the first point."
      },
      {
        "name": "latitude2",
        "type": "latitude",
        "description": "The latitude of the second point."
      },
      {
        "name": "longitude2",
        "type": "longitude",
        "description": "The longitude of the second point."
      }
    ],
    "examples": [
      "greatCircleDistance(latitude1, longitude1, latitude2, longitude2) returns 112.98"
    ]
  },
  "if": {
    "displayName": "if",
    "description": "Creates an “if” block. If the expression in parentheses after if is true, the formula returns the upper value; if not, it returns the lower.",
    "args": [
      {
        "name": "logical_test",
        "type": "statement",
        "description": "The logical test of the if statement"
      },
      {
        "name": "value_if_true",
        "type": "statement",
        "description": "The value of the if statement if the result is true."
      },
      {
        "name": "value_if_false",
        "type": "statement",
        "description": "The value of the if statement if the result is false."
      }
    ],
    "examples": [
      "if(Speed>40,\"Fast\",\"Slow\") says if the speed is greater than 40, return \"Fast\", otherwise return \"Slow\"",
      "Speed>40?\"Fast\":\"Slow\" is the same statement as above"
    ]
  },
  "isFinite": {
    "displayName": "isFinite",
    "description": "Checks whether a number is a finite number.",
    "args": [
      {
        "name": "value",
        "type": "value",
        "description": "The value to be tested"
      }
    ],
    "examples": [
      "isFinite(5) returns true",
      "isFinite(5 - 9) returns true",
      "isFinite(\"123\") returns false",
      "isFinite(\"Hi\") returns false"
    ]
  },
  "number": {
    "displayName": "number",
    "description": "Converts the input value to a numeric value.",
    "args": [
      {
        "name": "value",
        "type": "value",
        "description": "The text to be converted to a number."
      }
    ],
    "examples": [
      "number(\"45\") returns 45",
      "number(2.00) returns 2"
    ]
  },
  "random": {
    "displayName": "random",
    "description": "Returns a random number drawn from a uniform distribution.",
    "args": [
      {
        "name": "min",
        "type": "value",
        "description": "The smallest number random() will return."
      },
      {
        "name": "max",
        "type": "value",
        "description": "The largest number random() will return."
      }
    ],
    "examples": [
      "random() will return a random number between 0 and 1",
      "random(100) will return a random number between 0 and 100",
      "random(1, 100) will return a random number between 1 and 100"
    ]
  },
  "string": {
    "displayName": "string",
    "description": "Converts the input value to a string.",
    "args": [
      {
        "name": "value",
        "type": "value",
        "description": "The text to be converted to a string."
      }
    ],
    "examples": [
      "string(45) returns the string 45",
      "string(\"H\"+\"i\") returns Hi"
    ]
  },
  /*
   * Statistical Functions
   */
  "count": {
    "displayName": "count",
    "description": "Returns the number of cases in the collection.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The values to be counted."
      },
      {
        "name": "filter",
        "type": "boolean",
        "description": "Serves as a filter for the cases that will be counted."
      }
    ],
    "examples": [
      "count() returns the number of cases",
      "count(Height) returns the number of cases for the attribute Height",
      "count(Height, Age<18) returns the number of cases for the attribute Height with a value for the Age attribute that is less than 18."
    ]
  },
  "max": {
    "displayName": "max",
    "description": "Returns the largest value in a collection.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The argument for which you want the maximum value."
      },
      {
        "name": "filter",
        "type": "boolean",
        "description": "Serves as a filter for the cases that will be counted."
      }
    ],
    "examples": [
      "max(Age) returns the maximum age",
      "max(Age, Sex=\"Female\") returns maximum age among females"
    ]
  },
  "mean": {
    "displayName": "mean",
    "description": "Returns the arithmetic mean (sum divided by count) of its argument evaluated for every case.",
    "args": [
      {
        "name": "mu",
        "type": "any",
        "description": "The argument for which you want to compute the mean."
      },
      {
        "name": "filter",
        "type": "boolean",
        "description": "Serves as a filter for the cases that will be counted."
      }
    ],
    "examples": [
      "mean(Height) computes the mean of the attribute Height",
      "mean(Height, Sex = \"F\") computes the mean Height of females"
    ]
  },
  "median": {
    "displayName": "median",
    "description": "Returns the median. Half the values of the attribute will be above this and half will be below.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The argument for which you want to compute the median."
      }
    ],
    "examples": [
      "median(Height) computes the median of the attribute Height"
    ]
  },
  "min": {
    "displayName": "min",
    "description": "Returns the smallest value in a collection.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The argument for which you want the minimum value."
      },
      {
        "name": "filter",
        "type": "boolean",
        "description": "Serves as a filter for the cases that will be counted."
      }
    ],
    "examples": [
      "min(Age) returns the maximum Age",
      "min(Age, Sex=\"Male\") returns minimum age among males"
    ]
  },
  "percentile": {
    "displayName": "percentile",
    "description": "Takes two arguments, the first being the desired percentile and the second the attribute for which the percentile will be computed.",
    "args": [
      {
        "name": "constant",
        "type": "value",
        "description": "The percentile value in the range 0 to 100, inclusive."
      },
      {
        "name": "expression",
        "type": "attribute",
        "description": "The attribute of the percentile that will be calculated."
      }
    ],
    "examples": [
      "percentile(50,Speed) is another way to compute the median for the attribute Speed",
      "percentile(95,Score) will return the Score corresponding to the 95th percentile"
    ]
  },
  "stdDev": {
    "displayName": "stdDev",
    "description": "Computes the sample standard deviation.",
    "args": [
      {
        "name": "value",
        "type": "attribute",
        "description": "The attribute for which you want to find the standard deviation."
      }
    ],
    "examples": [
      "stdDev(Pressure) computes the sample standard deviation of the attribute Pressure"
    ]
  },
  "stdErr": {
    "displayName": "stdErr",
    "description": "Returns the standard error.",
    "args": [
      {
        "name": "value",
        "type": "attribute",
        "description": "The attribute for which you want to find the standard error."
      }
    ],
    "examples": [
      "stdError(Score) computes the sample standard error of the attribute Score"
    ]
  },
  "sum": {
    "displayName": "sum",
    "description": "Returns the sum of its argument evaluated for every case.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The attribute for which you want to find the sum."
      },
      {
        "name": "filter",
        "type": "expression",
        "description": "Additional filter, numbers, or ranges for which you want the first case."
      }
    ],
    "examples": [
      "sum(grade_point) computes the sum of the grade points",
      "sum(Mass, Height>60) returns the sum of the masses for heights taller than 60"
    ]
  },
  "variance": {
    "displayName": "variance",
    "description": "Computes the variance of an attribute, that is, the square of the standard deviation.",
    "args": [
      {
        "name": "expression",
        "type": "attribute",
        "description": "The attribute for which you want to find the variance."
      }
    ],
    "examples": [
      "variance(test_scores) computes the variance of the test scores",
      "variance(Before-After) computes the variance of the difference of the two attributes Before and After"
    ]
  },
/*
 * String Functions
 */
"beginsWith": {
"displayName": "",
"description": "",
"examples": [
]
},
"charAt": {
"displayName": "",
"description": "",
"examples": [
]
},
"concat": {
"displayName": "concat",
"description": "Combines multiple strings into a single string.",
"args": [
{
"name": "str1",
"type": "string",
"description": "the first string"
},
{
"name": "str2",
"type": "string",
"description": "the next string"
},
{
"name": "...",
"type": "string",
"description": "additional strings"
}
],
"examples": [
]
},
"endsWith": {
"displayName": "",
"description": "",
"examples": [
]
},
"join": {
"displayName": "join",
"description": "Combines multiple strings into a single string with a delimiter.",
"args": [
{
"name": "delimiter",
"type": "string",
"description": "the string used to separate the other strings"
},
{
"name": "str1",
"type": "string",
"description": "the first string"
},
{
"name": "str2",
"type": "string",
"description": "the next string"
},
{
"name": "...",
"type": "string",
"description": "additional strings"
}
],
"examples": [
]
}

/*
 * Trigonometric Functions
 */
}