/*
 * JSON file which contains information about CODAP functions in the form of localizable strings.
 * Comments are allowed because they are stripped out before the file is parsed internally.
 */
{
  /*
   * Arithmetic Functions
   */
  "abs": {
    "displayName": "abs",
    "description": "Computes the absolute value of its argument. This is equivalent to using the absolute value bars.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number of which you want the absolute value."
      }
    ],
    "examples": [
      "abs(3 – 5) is 2",
      "abs(3-7) = |3 – 7|=4"
    ]
  },
  "ceil": {
    "displayName": "ceil",
    "description": "Returns the closest integer greater than or equal to its argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number that should be rounded up."
      }
    ],
    "examples": [
      "ceil(1) returns 1",
      "ceil(1.5) returns 2",
      "ceil(-1.5) returns -1"
    ]
  },
  "exp": {
    "displayName": "exp",
    "description": "Returns the result of computing the constant e to the power of its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The exponent applied to the base e."
      }
    ],
    "examples": [
      "exp(2) is 7.39, the same as e squared"
    ]
  },
  "floor": {
    "displayName": "floor",
    "description": "Returns the largest integer less than or equal to its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number that should be rounded down."
      }
    ],
    "examples": [
      "floor(1) returns 1",
      "floor(1.5) returns 1",
      "floor(-1.5) returns -2"
    ]
  },
  "frac": {
    "displayName": "frac",
    "description": "Returns the fractional or noninteger part of a number x.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the fractional part."
      }
    ],
    "examples": [
      "frac(1.5) returns 0.5",
      "frac(-2.3) returns -0.3"
    ]
  },
  "ln": {
    "displayName": "ln",
    "description": "Returns the logarithm of a number to base e.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the natural logarithm."
      }
    ],
    "examples": [
      "ln(100) is 4.61"
    ]
  },
  "log": {
    "displayName": "log",
    "description": "Returns the logarithm of a number to base 10.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the logarithm."
      }
    ],
    "examples": [
      "log(100) is 2"
    ]
  },
  "pow": {
    "displayName": "pow",
    "description": "Returns the result of a number raised to a power.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The base number."
      },
      {
        "name": "power",
        "type": "number",
        "description": "The power of the exponent."
      }
    ],
    "examples": [
      "pow(2,5) is 2 to the 5, returns 32"
    ]
  },
  "round": {
    "displayName": "round",
    "description": "Returns the value of its argument rounded to the specified number of decimal places (default 0). This function has an optional, second argument that specifies how many decimals to round to.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want to round to the nearest integer."
      },
      {
        "name": "digits",
        "type": "number",
        "description": "The number of digits to the right of the decimal point. The argument can be negative to round off digits left to the decimal point."
      }
    ],
    "examples": [
      "round(3.14) is 3",
      "round(π, 4) is 3.1416",
      "round(1234, –2) is 1200"
    ]
  },
  "sqrt": {
    "displayName": "sqrt",
    "description": "Returns the square root of its numeric argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number for which you want the square root."
      }
    ],
    "examples": [
      "sqrt(100) returns 10"
    ]
  },
  "trunc": {
    "displayName": "round",
    "description": "Returns the nearest integer equal to or smaller in magnitude (closer to zero) than its argument.",
    "args": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to truncate."
      }
    ],
    "examples": [
      " trunc(5.5) returns 5"
    ]
  },
  /*
   * Date/Time Functions
   */
  "date": {
    "displayName": "date",
    "description": "Returns a new date created from its arguments. If any argument is omitted it is defaulted to 0 (or 1 for the day). If a single large argument is specified, it is assumed to be seconds since January 1, 1970 and is converted accordingly.",
    "args": [
      {
        "name": "year",
        "type": "number",
        "description": "Represents the year of the date. This can be a 1-digit, 2-digit, 3-digit, or 4-digit number."
      },
      {
        "name": "month",
        "type": "number",
        "description": "Represents the month of the year, from 1 to 12."
      },
      {
        "name": "day",
        "type": "number",
        "description": "Represents the day of the month, from 1 to 31."
      },
      {
        "name": "hour",
        "type": "number",
        "description": "Represents the hour of the day, from 1 to 23."
      },
      {
        "name": "minute",
        "type": "number",
        "description": "Represents the minutes of the hour, from 1 to 59."
      },
      {
        "name": "seconds",
      "type": "number",
      "description": "Represents the seconds of the minute, from 1 to 59."
      }
    ],
    "examples": [
      "date(1969, 7, 16) returns 7/16/1969",
      "date(1395154345) returns 3/18/2014 7:52:25 AM",
      "date(2016, 12, 19, 13, 59, 15, 26) returns 12/19/2016 1:59:15 PM",
      "date(16) returns 1/1/2016"
    ]
  },
  "dayOfMonth": {
    "displayName": "dayOfMonth",
    "description": "Returns the day of the month corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "dayOfMonth(\"9/1/2016\") returns 1",
      "dayOfMonth(\"6-14-2008\") returns 14"

    ]
  },
  "dayOfWeek": {
    "displayName": "dayOfWeek",
    "description": "Returns the numeric day of the week corresponding to the given date.",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, dayOfWeek(\"8-31-2005\") returns 4 because August 31, 2005 is a Wednesday"
    ]
  },
  "dayOfWeekName": {
    "displayName": "dayOfWeekName",
    "description": "Returns the word name of the day of the week corresponding to the given date. ",
    "args": [
      {
        "name": "date",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is Aug 31, 2005, dayOfWeek(\"8-31-2005\") returns the string Wednesday"
    ]
  },
  "hours": {
    "displayName": "hours",
    "description": "Returns the hour of the day corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If date_time is 8:57 PM on Aug 31, 2005, hours(\"8-31-2005 8:57 PM\") returns 20"
    ]
  },
  "minutes": {
    "displayName": "minutes",
    "description": "Returns the minute of the hour corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If date_time is 8:57 PM on Aug 31, 2005, minutes(\"8-31-2005 8:57 PM\") returns 57"
    ]
  },
  "month": {
    "displayName": "month",
    "description": "Returns the number of the month corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If date_time is 3:30 PM on Aug 31, 2005, month(\"8-31-2005 3:30 PM\") returns 8"
    ]
  },
  "monthName": {
    "displayName": "month",
    "description": "Returns the name of the month corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If date_time is 3:30 PM on Aug 31, 2005, monthName(\"8-31-2005 8:57 PM\") returns the string August"
    ]
  },
  "now": {
    "displayName": "now",
    "description": "Returns the current date and time.",
    "examples": [
      "If the current date and time is 3:30:51 PM on Aug 31, 2005, now() returns 8/31/2005 3:30:51 PM"
    ]
  },
  "seconds": {
    "displayName": "seconds",
    "description": "Returns the seconds of the minute corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is 3:30:51 PM on Aug 31, 2005, seconds(\"8-31-2005 3:30:51 PM\") returns 51"
    ]
  },
  "today": {
    "displayName": "today",
    "description": "Returns current date with no time.",
    "examples": [
      "If today's date is December 20, 2016, today() returns 12/20/2016"
    ]
  },
  "year": {
    "displayName": "year",
    "description": "Returns the year corresponding to the given date.",
    "args": [
      {
        "name": "date_time",
        "type": "string",
        "description": "The specified date. Note that this needs to be inputted as a string."
      }
    ],
    "examples": [
      "If the date is 3:30 PM on Aug 31, 2005, year(\"8-31-2005 3:30 PM\") returns 2005",
      "year(\"8/25/1492\") returns 1492"
    ]
  },
  /*
   * Lookup Functions
   */
  "first": {
    "displayName": "",
    "description": "",
    "examples": [
    ]
  },
  /*
   * Other Functions
   */
  "boolean": {
    "displayName": "",
    "description": "",
    "examples": [
    ]
  },
  /*
   * Statistical Functions
   */
  "count": {
    "displayName": "count",
    "description": "Returns the number of cases with non-empty/non-false values for its expression argument.",
    "args": [
      {
        "name": "expression",
        "type": "any",
        "description": "The values to be counted."
      },
      {
        "name": "filter",
        "type": "boolean",
        "description": "An expression that determines the cases to be considered."
      }
    ],
    "examples": [
      "count() with no arguments is interpreted differently depending on the context. In an attribute formula it returns the number of child cases. In a plotted value, it is equivalent to count(xAxisAttribute).",
      "count(height) returns 3 if the 'height' attribute contains [1, \"yes\", true, false, \"\"].",
      "count(height, age<18) returns 3 if the 'height' attribute contains [1, \"yes\", true, false, \"\"] for the cases with a value for the age attribute that is less than 18."
    ]
  },
  /*
   * String Functions
   */
  "beginsWith": {
    "displayName": "",
    "description": "",
    "examples": [
    ]
  },
  "charAt": {
    "displayName": "",
    "description": "",
    "examples": [
    ]
  },
  "concat": {
    "displayName": "concat",
    "description": "Combines multiple strings into a single string.",
    "args": [
      {
        "name": "str1",
        "type": "string",
        "description": "the first string"
      },
      {
        "name": "str2",
        "type": "string",
        "description": "the next string"
      },
      {
        "name": "...",
        "type": "string",
        "description": "additional strings"
      }
    ],
    "examples": [
    ]
  },
  "endsWith": {
    "displayName": "",
    "description": "",
    "examples": [
    ]
  },
  "join": {
    "displayName": "join",
    "description": "Combines multiple strings into a single string with a delimiter.",
    "args": [
      {
        "name": "delimiter",
        "type": "string",
        "description": "the string used to separate the other strings"
      },
      {
        "name": "str1",
        "type": "string",
        "description": "the first string"
      },
      {
        "name": "str2",
        "type": "string",
        "description": "the next string"
      },
      {
        "name": "...",
        "type": "string",
        "description": "additional strings"
      }
    ],
    "examples": [
    ]
  }

  /*
   * Trigonometric Functions
   */
}